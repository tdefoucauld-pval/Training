interface LibCube:FactsSorter
    field facts
        --> domainsLevel2 LibCube:Fact
        --> domains Collection
        --> documentation "The facts that will be sorted"
        --> xmlMapping XmlMappingProperty_NO_SAVE
        --> dsl -> Textualization
            --> language LANG_en
            --> root "facts"
            --> number PLURAL
    ;
        
    field sortType
        --> domains Symbol
        --> documentation "Mode of sorting"
        --> xmlMapping XmlMappingProperty_NO_SAVE
        --> dsl -> Textualization
            --> language LANG_en
            --> root "sort type"
            --> number PLURAL
    ;

    field sortedFacts
        --> domainsLevel2 LibCube:Fact
        --> domains OrderedSet
        --> documentation "The sorted facts"
        --> xmlMapping XmlMappingProperty_SAVE
        --> dsl -> Textualization
            --> language LANG_en
            --> root "sorted facts"
            --> number PLURAL
    ;

    field measure
        --> domains LibCube:Measure
        --> documentation "The measure used as comparation criteria"
        --> xmlMapping XmlMappingProperty_NO_SAVE
        --> dsl -> Textualization
            --> language LANG_en
            --> root "measure"
            --> number SINGULAR
    ;

    field measures
        --> domains OrderedSet
        --> xmlMapping XmlMappingProperty_NO_SAVE
        --> documentation "The measure used as comparation criteria"
        --> dsl -> Textualization
            --> language LANG_en
            --> root "measures"
            --> number PLURAL
    ;
    
    field twoFactsComparisonAttribute
        --> domains Attribute
        --> xmlMapping XmlMappingProperty_NO_SAVE
        --> documentation "The TwoFactsOneMeasureComparison object used as comparison criteria"
        --> dsl -> Textualization
            --> language LANG_en
            --> root "comparison attribute"
            --> number SINGULAR
    ;

    field twoFactsDifferenceAttribute
        --> domains Attribute
        --> xmlMapping XmlMappingProperty_NO_SAVE
        --> documentation "The TwoFactsOneMeasureComparison object diff attribute used as comparison criteria"
        --> dsl -> Textualization
            --> language LANG_en
            --> root "comparison attribute"
            --> number SINGULAR
    ;

    field isAscendant
        --> domains Boolean
        --> defaultValue false
        --> documentation "Is ordering ascendant?"
        --> dsl -> Textualization
            --> language LANG_en
            --> root "is ascendant?"
            --> number SINGULAR
    ;

    field useAbsoluteValue
        --> domains Boolean
        --> defaultValue false
        --> documentation "Use Absolute for comparison?"
        --> dsl -> Textualization
            --> language LANG_en
            --> root "use absolute value?"
            --> number SINGULAR
    ; 

    method multipleMeasuresComparatorFunc(LibCube:Fact fact1, 
                                          LibCube:Fact fact2, 
                                          LibCube:SortingOptions sortingOptions)
    --> domains Number

    method oneMeasureComparatorFunc(LibCube:Fact fact1, 
                                    LibCube:Fact fact2, 
                                    LibCube:SortingOptions sortingOptions)
    --> domains Number

    method comparisonAttributeComparatorFunc(LibCube:Fact fact1, 
                                             LibCube:Fact fact2, 
                                             LibCube:SortingOptions sortingOptions)
    --> domains Number
    
    method addMeasure(LibCube:Measure newMeasure)
    --> domains Void
    
    method getTopNFacts(Number numberOfFacts)
    --> domainsLevel2 LibCube:Fact
    --> domains OrderedSet
    --> dsl -> Textualization
        --> language LANG_en
        --> root "top n facts"
        --> number SINGULAR
    ;
    
    method getTopFact()
    --> domains LibCube:Fact
    --> dsl -> Textualization
        --> language LANG_en
        --> root "to fact"
        --> number SINGULAR
    ;
    
    method getFact(Number position)
    --> domains LibCube:Fact
    --> dsl -> Textualization
        --> language LANG_en
        --> root "fact at Nth Position"
        --> number SINGULAR
    ;

    method getFactsGreaterThan(Number value)
        --> domainsLevel2 LibCube:Fact
        --> domains OrderedSet 
        --> documentation "The Facts greater than the value"
        --> dsl -> Textualization
            --> language LANG_en
            --> root "facts greater than"
            --> number SINGULAR
    ;

    method getFactsLowerThan(Number value)
        --> domainsLevel2 LibCube:Fact
        --> domains OrderedSet 
        --> documentation "The Facts lower than the value"
        --> dsl -> Textualization
            --> language LANG_en
            --> root "facts lower than"
            --> number SINGULAR
    ;

    method getFactsSumUnderTotalPercentage(Number percentage)
        --> domainsLevel2 LibCube:Fact
        --> domains OrderedSet 
        --> documentation "The Facts whose sum of values is under the given percentage of the total"  
        --> dsl -> Textualization
            --> language LANG_en
            --> root "Facts whose sum of values is under the given percentage of the total"
            --> number SINGULAR
    ;

    method getRank(LibCube:Member member)
    --> domains Number
    --> documentation "Gets the rank of a fact that has a given dimension member"
    
    method sortFacts()
    --> domains Void
    
    classProperties
    --> dsl -> Textualization
        --> language LANG_en
        --> root "Facts Sorter"
        --> number SINGULAR
    ;
;

implementation LibCube:FactsSorter
;

Function LibCube:FactsSorter::oneMeasureComparatorFunc(LibCube:Fact fact1, 
                                                       LibCube:Fact fact2,
                                                       LibCube:SortingOptions sortingOptions)
--> local LibCube:Measure measure                                               
--> action {
    measure = sortingOptions.measure;
    if(sortingOptions.useAbsoluteValue == true){
        return abs(fact1.getMeasure(measure).value) - abs(fact2.getMeasure(measure).value);
    } else {
        return fact1.getMeasure(measure).value - fact2.getMeasure(measure).value;
    }
}
;

Function LibCube:FactsSorter::multipleMeasuresComparatorFunc(LibCube:Fact fact1, 
                                                     LibCube:Fact fact2,
                                                     LibCube:SortingOptions sortingOptions)
--> action {

    if(sortingOptions.useAbsoluteValue == true){
        foreach(_measure, sortingOptions.measures){
            if(abs(fact1.getMeasure(_measure).value) > abs(fact2.getMeasure(_measure).value)){
                return 1;
                break;
            }
            if(abs(fact1.getMeasure(_measure).value) < abs(fact2.getMeasure(_measure).value)){
                return -1;
                break;
            }
        }
        return 0;    
    } else {
      foreach(_measure, sortingOptions.measures){
        if(fact1.getMeasure(_measure).value > fact2.getMeasure(_measure).value){
            return 1;
            break;
        }
        if(fact1.getMeasure(_measure).value < fact2.getMeasure(_measure).value){
            return -1;
            break;
        }
      }
        return 0;
    }
}
;

Function LibCube:FactsSorter::comparisonAttributeComparatorFunc(LibCube:Fact fact1, 
                                                        LibCube:Fact fact2,
                                                        LibCube:SortingOptions sortingOptions)
--> local Attribute twoFactsComparisonAttribute, Attribute twoFactsDifferenceAttribute                                                        
--> action {
    twoFactsComparisonAttribute = sortingOptions.comparisonAttribute;
    twoFactsDifferenceAttribute = sortingOptions.differenceAttribute;

    if(sortingOptions.useAbsoluteValue == true) {
        return abs(fact1.getAttributeValue(twoFactsComparisonAttribute).getAttributeValue(twoFactsDifferenceAttribute)) - 
               abs(fact2.getAttributeValue(twoFactsComparisonAttribute).getAttributeValue(twoFactsDifferenceAttribute));    
    }
    return fact1.getAttributeValue(twoFactsComparisonAttribute).getAttributeValue(twoFactsDifferenceAttribute) - 
           fact2.getAttributeValue(twoFactsComparisonAttribute).getAttributeValue(twoFactsDifferenceAttribute);
}
;

Function LibCube:FactsSorter::sortFacts()
--> local Boolean hasAllMeasures, Boolean hasAttributes, SortParameter sortParam, LibCube:SortingOptions sortingOptions
--> action {
    
    sortedFacts = new(OrderedSet);
    sortParam = new(SortParameter);
    sortingOptions = new(LibCube:SortingOptions);
    
    sortingOptions.sortType = sortType;
    sortingOptions.useAbsoluteValue = useAbsoluteValue;

    switch(sortType){
        case(SORT_TYPE_ONE_MEASURE):{
            sortingOptions.measure = measure;
            sortParam.expressionToValuate = LibCube:FactsSorter::oneMeasureComparatorFunc;

            // only sort facts with the measure
            foreach(_fact, facts){
                hasAllMeasures = true
                if(_fact.getMeasure(measure) == null){
                    logWarning("The following fact does not have the ", measure.label, " measure sorting: ", _fact);
                    hasAllMeasures = false
                }   
                if(hasAllMeasures == true){
                    sortedFacts.add(_fact)
                }
            }
        }
        case(SORT_TYPE_MULTIPLE_MEASURES):{
            sortingOptions.measures = measures;
            sortParam.expressionToValuate = LibCube:FactsSorter::multipleMeasuresComparatorFunc;

            // only sort facts with all the measures
            foreach(_fact, facts){
                hasAllMeasures = true;
                foreach(LibCube:Measure _measure, measures){
                    if(_fact.getMeasure(_measure)==null){
                        logWarning("The following fact does not have the ", _measure.label, " measure for sorting: ", _fact);
                        hasAllMeasures = false;
                    }
                }   
                if(hasAllMeasures == true){
                    sortedFacts.add(_fact);
                }
            }
        }
        case(SORT_TYPE_COMPARISON_ATTRIBUTE):{
            sortingOptions.comparisonAttribute = twoFactsComparisonAttribute;
            sortingOptions.differenceAttribute = twoFactsDifferenceAttribute;
            sortParam.expressionToValuate = LibCube:FactsSorter::comparisonAttributeComparatorFunc

            foreach(_fact, facts){
                hasAttributes = true;
                if(_fact.getAttributeValue(twoFactsComparisonAttribute)==null){
                    logWarning("The following fact does not have the passed TwoFactsOneMeasureComparison attribute for sorting: ", _fact);
                    hasAttributes = false;
                } else {
                    if(_fact.getAttributeValue(twoFactsComparisonAttribute).getAttributeValue(twoFactsDifferenceAttribute) == null){
                        logWarning("The following fact does not have the passed TwoFactsOneMeasureComparison difference field attribute for sorting: ", _fact);
                        hasAttributes = false;
                    }
                }
            
                if(hasAttributes == true){
                    sortedFacts.add(_fact);
                }
            }
        }
    }
    
    sortingOptions.validateOptions();
    sortParam.argumentForExpressionToValuate = sortingOptions;
    sortParam.order = _CALCULATED_RELATIVE_ORDER;
    sortParam.ascendant = isAscendant;

    
    if(sortedFacts != null && sortedFacts.isEmpty() == false){
      sortedFacts.sort(sortParam);
    }
}
;

Function LibCube:FactsSorter::getTopNFacts(Number numberOfFacts)
--> local OrderedSet topNItems
--> action {
    topNItems = new(OrderedSet)
    foreach(_fact, sortedFacts){
        if(topNItems.size() < numberOfFacts){
            topNItems.add(_fact)
        }
        else{
            break;
        }
    }
    return topNItems
}
;

Function LibCube:FactsSorter::getTopFact()
--> action {
    return sortedFacts.get(_FIRST)
}
;

Function LibCube:FactsSorter::getFact(Number position)
--> action {
	return ifExpr(position >0 ) 
		then sortedFacts.get(position)
		else null
}
;

Function LibCube:FactsSorter::getFactsGreaterThan(Number value)
--> local OrderedSet greaterFacts
--> action {
    greaterFacts = new(OrderedSet)
    if(sortType == SORT_TYPE_ONE_MEASURE){
      foreach(_fact, sortedFacts){
          if(_fact.getMeasure(measure).value > value){
              greaterFacts.add(_fact);
          }
      }       
    }
    if(sortType == SORT_TYPE_MULTIPLE_MEASURES){
      foreach(_fact, sortedFacts){
          if(_fact.getMeasure(measures.get(_FIRST)).value > value){
              greaterFacts.add(_fact);
          }
      }       
    }
    if(sortType == SORT_TYPE_COMPARISON_ATTRIBUTE){
      foreach(_fact, sortedFacts){
          if(_fact.getAttributeValue(twoFactsComparisonAttribute).getAttributeValue(twoFactsDifferenceAttribute) > value){
              greaterFacts.add(_fact);
          }
      }       
    }
    
    return greaterFacts
}
;

Function LibCube:FactsSorter::getFactsLowerThan(Number value)
--> local OrderedSet lowerFacts
--> action {
    lowerFacts = new(OrderedSet)
    if(sortType == SORT_TYPE_ONE_MEASURE){
      foreach(_fact, sortedFacts){
          if(_fact.getMeasure(measure).value < value){
              lowerFacts.add(_fact);
          }
      }       
    }
    if(sortType == SORT_TYPE_MULTIPLE_MEASURES){
      foreach(_fact, sortedFacts){
          if(_fact.getMeasure(measures.get(_FIRST)).value < value){
              lowerFacts.add(_fact);
          }
      }       
    }
    if(sortType == SORT_TYPE_COMPARISON_ATTRIBUTE){
      foreach(_fact, sortedFacts){
          if(_fact.getAttributeValue(twoFactsComparisonAttribute).getAttributeValue(twoFactsDifferenceAttribute) < value){
              lowerFacts.add(_fact);
          }
      }       
    }
    return lowerFacts
}
;

Function LibCube:FactsSorter::getFactsSumUnderTotalPercentage(Number percentage)
--> local OrderedSet factsUnderTotal
--> action {
    factsUnderTotal = new(OrderedSet)
    // TODO 
    return factsUnderTotal
}
;

Function LibCube:FactsSorter::addMeasure(LibCube:Measure newMeasure)
--> action {
    if(measures == null){
        measures = new(OrderedSet)
    }
    measures.add(newMeasure)
}
;

Function LibCube:FactsSorter::getRank(LibCube:Member member)
--> action {
    foreach(_fact, sortedFacts){
        if(_fact.getDimension(member.dimension) == member){
            return sortedFacts.indexOf(_fact);
        }
    }
    return 0;
}
;